{"version":3,"sources":["modules/Auth/duck.js","modules/Auth/selectors.js","modules/Auth/api.js","modules/Auth/sagas.js","components/common/Header/Header.js","components/Login/Login.js","components/common/PrivateRoute/PrivateRoute.js","modules/Map/apiKey.js","modules/Map/duck.js","modules/Map/api.js","modules/Map/selectors.js","modules/Profile/duck.js","modules/Profile/selectors.js","modules/Profile/api.js","modules/Profile/sagas.js","modules/Map/sagas.js","components/Map/MapBox/MapBox.js","modules/Route/duck.js","modules/Route/selectors.js","modules/Route/sagas.js","components/Map/MapForm/MapForm.js","components/Map/Map.js","components/Profile/Profile.js","components/common/AppRouter/AppRouter.js","modules/index.js","store.js","index.js"],"names":["FETCH_AUTH_REQUEST","FETCH_AUTH_SUCCESS","FETCH_AUTH_FAILURE","FETCH_LOGOUT_REQUEST","fetchAuthRequest","createAction","fetchAuthSuccess","fetchAuthFailure","fetchLogoutRequest","isAuthorized","handleActions","combineReducers","getIsAuthorized","state","auth","authUser","username","password","fetch","then","response","status","Promise","reject","json","fetchAuthWatcher","fetchAuthFlow","fetchLogoutWatcher","takeLatest","action","payload","call","result","success","window","localStorage","setItem","JSON","stringify","put","Error","error","message","removeItem","fork","Header","handleClick","e","props","preventDefault","this","classes","className","root","data-testid","AppBar","position","color","Toolbar","Typography","variant","title","to","Link","activeClassName","NavLink_selected","Button","getItem","onClick","PureComponent","HeaderStyled","withStyles","theme","flexGrow","textDecoration","background","cursor","mapDispatchToProps","connect","withRouter","BasicFormSchema","Yup","shape","required","email","matches","UppercasingTextField","fieldToTextField","onChange","event","value","target","form","setFieldValue","field","name","Login","renderApp","renderLogin","Grid","container","direction","justify","alignItems","Card","CardContent","gutterBottom","component","initialValues","validationSchema","onSubmit","render","isValid","submitForm","align-items","FormGrid","type","label","disabled","LoginStyled","minHeight","textAlign","boxSizing","minWidth","maxWidth","padding","PrivateRoute","renderRoute","Component","rest","apiKey","FETCH_MAP_REQUEST","FETCH_MAP_SUCCESS","FETCH_MAP_FAILURE","FETCH_ADDRESS_LIST_REQUEST","FETCH_ADDRESS_LIST_SUCCESS","FETCH_ADDRESS_LIST_FAILURE","fetchMapRequest","fetchMapSuccess","fetchMapFailure","fetchAddressListRequest","fetchAddressListSuccess","fetchAddressListFailure","addressList","_state","addresses","map","mapInit","mapContainer","mapboxgl","accessToken","Map","current","style","center","zoom","fetchAddressList","fetchRoute","address1","address2","drawRoute","route","getLayer","getSource","setData","features","properties","geometry","coordinates","addLayer","id","source","data","layout","paint","removeRoute","removeLayer","removeSource","flyTo","point","bearing","speed","curve","getAddressList","FETCH_PROFILE_REQUEST","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_FAILURE","fetchProfileRequest","fetchProfileSuccess","fetchProfileFailure","cardName","cardNumber","expDate","CVV","getCardName","profile","getCardNumber","getExpDate","getCVV","getProfileInLocalStorage","parse","setProfileInLocalStorage","localStorageValue","fetchProfileWatcher","fetchProfileFlow","fetchMapWatcher","fetchMapFlow","fetchAddressListFlow","select","MapBox","React","createRef","ref","FETCH_ROUTE_REQUEST","FETCH_ROUTE_SUCCESS","FETCH_ROUTE_FAILURE","FETCH_NEW_ROUTE_REQUEST","fetchRouteRequest","fetchRouteSuccess","fetchRouteFailure","fetchNewRouteRequest","getRoute","fetchRouteWatcher","fetchRouteFlow","fetchRouteSuccessFlow","fetchNewRouteFlow","MapForm","Card__Button","ranges","Array","isArray","values","handleChange","margin","InputLabelProps","shrink","option","MenuItem","key","renderNewOrderForm","renderOrderForm","renderMessage","top","left","width","marginTop","memo","length","Profile","date","Date","dateInputDisabled","isCardAdded","handleDateChange","setState","getFormattedDate","day","getDate","month","getMonth","year","getFullYear","formatStringByPattern","spacing","item","xs","sm","fullWidth","MuiPickersUtilsProvider","utils","DateFnsUtils","Form__Input_Date","disableToolbar","format","helperText","Grid__Card","Title","renderAlert","renderForm","AppRouter","authDataSaved","profileSaved","indexPath","indexComponent","path","rootSaga","authSagas","profileSagas","mapSagas","routeSagas","createAppStore","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.c2038d05.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\n\nconst STORE_KEY = 'AUTH';\nexport const FETCH_AUTH_REQUEST = `${STORE_KEY}/FETCH_AUTH_REQUEST`;\nexport const FETCH_AUTH_SUCCESS = `${STORE_KEY}/FETCH_AUTH_SUCCESS`;\nexport const FETCH_AUTH_FAILURE = `${STORE_KEY}/FETCH_AUTH_FAILURE`;\nexport const FETCH_LOGOUT_REQUEST = `${STORE_KEY}/FETCH_LOGOUT_REQUEST`;\n\nexport const fetchAuthRequest = createAction(FETCH_AUTH_REQUEST);\nexport const fetchAuthSuccess = createAction(FETCH_AUTH_SUCCESS);\nexport const fetchAuthFailure = createAction(FETCH_AUTH_FAILURE);\nexport const fetchLogoutRequest = createAction(FETCH_LOGOUT_REQUEST);\n\nconst isAuthorized = handleActions(\n    {\n        [fetchAuthRequest]: () => false,\n        [fetchAuthSuccess]: () => true,\n        [fetchAuthFailure]: () => false,\n        [fetchLogoutRequest]: () => false\n    },\n    false\n)\n\nexport default combineReducers({\n    isAuthorized\n});","export const getIsAuthorized = (state) => state.auth.isAuthorized;","export const authUser = (username, password) =>\n    fetch(`https://loft-taxi.glitch.me/auth?username=${username}&password=${password}`)\n        .then(response =>\n            response.status !== 200 ? Promise.reject(response) : response.json()\n        );","import { takeLatest, call, put, fork }  from 'redux-saga/effects';\n\nimport { fetchAuthRequest, fetchAuthSuccess, fetchAuthFailure, fetchLogoutRequest } from './duck';\nimport { authUser } from './api';\n\nfunction* fetchAuthWatcher() {\n    yield takeLatest(fetchAuthRequest, fetchAuthFlow);\n}\n\nfunction* fetchAuthFlow(action) {\n    try {\n        const { username, password } = action.payload;\n\n        const result = yield call(authUser, username, password);\n        if (result.success) {\n            window.localStorage.setItem('authData', JSON.stringify({ username, password }));\n            yield put(fetchAuthSuccess(result));\n        }\n        else {\n            throw new Error(result.error);\n        }\n    }\n    catch (error) {\n        yield put(fetchAuthFailure(error.message));\n    }\n}\n\nfunction* fetchLogoutWatcher() {\n    yield takeLatest(fetchLogoutRequest, () => {\n        window.localStorage.removeItem('authData');\n    });\n}\n\nexport default function*() {\n    yield fork(fetchAuthWatcher);\n    yield fork(fetchLogoutWatcher);\n};","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { getIsAuthorized, fetchLogoutRequest } from '../../../modules/Auth';\n\nconst styles = (theme) => ({\n    root: {\n      flexGrow: 1\n    },\n    title: {\n      flexGrow: 1\n    },\n    Link: {\n        textDecoration: 'none',\n    },\n    NavLink_selected: {\n        '& .MuiButton-text': {\n            background: 'none',\n            color: '#f48fb1',\n\n            cursor: 'default'\n        },\n    },\n});\n\nclass Header extends PureComponent {\n    handleClick = (e) => {\n        const { fetchLogoutRequest } = this.props;\n\n        e.preventDefault();\n        fetchLogoutRequest();\n    };\n\n    render() {\n        const { isAuthorized, classes } = this.props;\n        \n        return (\n            <div className={'Header ' + classes.root} data-testid=\"Header\">\n                <AppBar position=\"static\" color=\"inherit\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Loft Taxi\n                        </Typography>\n                        \n                        <NavLink to=\"/map\" className={classes.Link} activeClassName={classes.NavLink_selected} data-testid=\"MapLink\">\n                            <Button color=\"default\">\n                                Карта\n                            </Button>\n                        </NavLink>\n\n                        <NavLink to=\"/profile\" className={classes.Link} activeClassName={classes.NavLink_selected} data-testid=\"ProfileLink\">\n                            <Button color=\"default\">Профиль</Button>\n                        </NavLink>\n                        \n                        {isAuthorized || window.localStorage.getItem('isAuthorized')\n                            ? (<NavLink to=\"/logout\" className={classes.Link} onClick={this.handleClick} data-testid=\"LogoutLink\">\n                                <Button color=\"default\">Выйти</Button>\n                            </NavLink>)\n                            : (<NavLink to=\"/login\" className={classes.Link} activeClassName={classes.NavLink_selected} data-testid=\"LoginLink\">\n                                <Button color=\"default\">Войти</Button>\n                            </NavLink>)\n                        }\n                    </Toolbar>\n                </AppBar>\n            </div>\n        )\n    }\n}\n\nexport const HeaderStyled = withStyles(styles)(Header);\n\nconst mapStateToProps = (state) => ({\n    isAuthorized: getIsAuthorized(state)\n});\n\nconst mapDispatchToProps = { fetchLogoutRequest };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(HeaderStyled));","import React, { PureComponent } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Formik, Field, Form } from 'formik';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { fieldToTextField } from 'formik-material-ui';\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\n\nimport { getIsAuthorized, fetchAuthRequest } from '../../modules/Auth';\n\nexport const styles = theme => ({\n    Grid: {\n        minHeight: '100vh',\n    },\n    title: {\n      textAlign: 'center',\n    },\n    Card: {\n        boxSizing: 'border-box',\n        minWidth: '25%',\n        maxWidth: '25%',\n        padding: 10\n    },\n    FormGrid: {\n        minHeight: 200\n    },\n    Button: {\n        maxWidth: 83\n    },\n});\n\nconst BasicFormSchema = Yup.object().shape({\n    username: Yup.string()\n        .required(\"Необходимо заполнить поле\")\n        .email(\"Неверная электронная почта\")\n        .matches(/^(test@test.com)$/, \"Неверная электронная почта\"),\n    password: Yup.string()\n        .required(\"Необходимо заполнить поле\")\n        .matches(/^(123123)$/, \"Неверный пароль\")\n});\n\nconst UppercasingTextField = (props) => (\n    <MuiTextField\n        {...fieldToTextField(props)}\n        onChange={(event) => {\n            const { value } = event.target;\n            props.form.setFieldValue(\n                props.field.name,\n                value ? value : ''\n            );\n        }}\n    />\n);\n\nexport class Login extends PureComponent {\n    render() {\n        const { isAuthorized } = this.props;\n\n        return isAuthorized ? this.renderApp() : this.renderLogin();\n    }\n\n    renderApp() {\n        return <Redirect to=\"/map\" />;\n    }\n    \n    renderLogin() {\n        const { fetchAuthRequest, classes } = this.props;\n\n        return (\n            <div className=\"Login\" data-testid=\"Login\">\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={classes.Grid}\n                >\n                    <Card className={classes.Card}>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h4\" component=\"h2\" className={classes.title}>\n                                Войти\n                            </Typography>\n                            <Formik\n                                initialValues={{\n                                    username: \"\",\n                                    password: \"\"\n                                }}\n\n                                validationSchema={BasicFormSchema}\n                                \n                                onSubmit={({ username, password }) => {\n                                    fetchAuthRequest({ username, password });\n                                }}\n\n                                render={({\n                                    isValid,\n                                    submitForm\n                                }) => (\n                                    <Form>\n                                         <Grid\n                                            container\n                                            direction=\"column\"\n                                            justify=\"space-around\"\n                                            align-items=\"center\"\n                                            className={classes.FormGrid}\n                                        >\n                                            <Field\n                                                type=\"email\"\n                                                name=\"username\"\n                                                label=\"Эл. почта\"\n                                                component={UppercasingTextField}\n                                            />\n                                            <Field\n                                                type=\"password\"\n                                                name=\"password\"\n                                                label=\"Пароль\"\n                                                component={UppercasingTextField}\n                                            />\n                                            <Button\n                                                className={classes.Button}\n                                                data-testid=\"SignInButton\"\n                                                type=\"submit\"\n                                                onClick={submitForm}\n                                                variant=\"outlined\"\n                                                color=\"primary\"\n                                                disabled={!isValid}\n                                            >\n                                                Войти\n                                            </Button>\n                                        </Grid>\n                                    </Form>\n                                    \n                                )}\n                            />\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport const LoginStyled = withStyles(styles)(Login);\n\nconst mapStateToProps = (state) => ({\n    isAuthorized: getIsAuthorized(state)\n});\n\nconst mapDispatchToProps = { fetchAuthRequest };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(LoginStyled));","import React, { PureComponent } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { getIsAuthorized } from '../../../modules/Auth';\n\nclass PrivateRoute extends PureComponent {\n    render() {\n        const { isAuthorized, component, ...rest } = this.props;\n\n        return <Route {...rest} render={this.renderRoute} />;\n    }\n\n    renderRoute = (props) => {\n        const { isAuthorized, component: Component } = this.props;\n\n        return (isAuthorized || window.localStorage.getItem('authData'))\n            ? <Component {...props} />\n            : <Redirect to=\"/login\" />;\n    };\n}\n\nconst mapStateToProps = (state) => ({\n    isAuthorized: getIsAuthorized(state)\n})\n\nexport default connect(\n    mapStateToProps\n)(PrivateRoute);","export const apiKey = \"pk.eyJ1IjoiaWx5YXNpZG9yY2hpayIsImEiOiJjazAxYTFpMHQxbWx5M2ZvMWVobDNsY3djIn0.A74tfZkLNWZ1lhs6NvYMeA\";","import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\n\n\nconst STORE_KEY = 'MAP';\n\nexport const FETCH_MAP_REQUEST = `${STORE_KEY}/FETCH_MAP_REQUEST`;\nexport const FETCH_MAP_SUCCESS = `${STORE_KEY}/FETCH_MAP_SUCCESS`;\nexport const FETCH_MAP_FAILURE = `${STORE_KEY}/FETCH_MAP_FAILURE`;\n\nexport const FETCH_ADDRESS_LIST_REQUEST = `${STORE_KEY}/FETCH_ADDRESS_LIST_REQUEST`;\nexport const FETCH_ADDRESS_LIST_SUCCESS = `${STORE_KEY}/FETCH_ADDRESS_LIST_SUCCESS`;\nexport const FETCH_ADDRESS_LIST_FAILURE = `${STORE_KEY}/FETCH_ADDRESS_LIST_FAILURE`;\n\n\nexport const fetchMapRequest = createAction(FETCH_MAP_REQUEST);\nexport const fetchMapSuccess = createAction(FETCH_MAP_SUCCESS);\nexport const fetchMapFailure = createAction(FETCH_MAP_FAILURE);\n\nexport const fetchAddressListRequest = createAction(FETCH_ADDRESS_LIST_REQUEST);\nexport const fetchAddressListSuccess = createAction(FETCH_ADDRESS_LIST_SUCCESS);\nexport const fetchAddressListFailure = createAction(FETCH_ADDRESS_LIST_FAILURE);\n\n\nconst addressList = handleActions(\n    {\n      [fetchAddressListRequest]: (_state) => _state,\n      [fetchAddressListSuccess]: (_state, action) => action.payload.addresses,\n      [fetchAddressListFailure]: (_state) => _state\n    },\n    {}\n);\n\nexport default combineReducers({\n    addressList\n});","import mapboxgl from 'mapbox-gl';\n\nimport { apiKey } from './apiKey';\n\nlet map = null;\nconst layerId = \"route\";\n\nexport const mapInit = (mapContainer) => {   \n    mapboxgl.accessToken = apiKey;\n\n    map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v9\",\n        center: [30.2656504, 59.8029126],\n        zoom: 15\n    });\n\n    return map;\n};\n\nexport const fetchAddressList = () =>\n    fetch('https://loft-taxi.glitch.me/addressList')\n        .then((response) => \n            (response.status !== 200) ? Promise.reject(response) : response.json()\n        );\n\nexport const fetchRoute = (address1, address2) =>\n    fetch(`https://loft-taxi.glitch.me/route?address1=${address1}&address2=${address2}`)\n        .then((response) => \n            (response.status !== 200) ? Promise.reject(response) : response.json()\n        );\n        \nexport const drawRoute = (route) => {\n    if (map.getLayer(layerId)) {\n        map.getSource(layerId).setData({\n            type: \"FeatureCollection\",\n            features: [{\n                type: \"Feature\",\n                properties: {},\n                geometry: {\n                    type: \"LineString\",\n                    coordinates: route\n                }\n            }]\n        });\n        \n        return;\n    }\n          \n    map.addLayer({\n        id: layerId,\n        type: \"line\",\n        source: {\n            type: \"geojson\",\n            data: {\n                type: \"Feature\",\n                properties: {},\n                geometry: {\n                    type: \"LineString\",\n                    coordinates: route\n                }\n            }\n        },\n        layout: {\n            \"line-join\": \"round\",\n            \"line-cap\": \"round\"\n        },\n        paint: {\n            \"line-color\": \"#c2423a\",\n            \"line-width\": 8\n        }\n    });\n};\n\nexport const removeRoute = () => {\n    map.removeLayer(layerId);\n    map.removeSource(layerId);\n};\n          \nexport const flyTo = (point) => {\n    map.flyTo({\n        center: point,\n        zoom: 14,\n        bearing: 0,\n        speed: 1,\n        curve: 1\n    });\n};","export const getAddressList = (state) => state.map.addressList;","import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\n\nconst STORE_KEY = 'PROFILE';\nexport const FETCH_PROFILE_REQUEST = `${STORE_KEY}/FETCH_PROFILE_REQUEST`;\nexport const FETCH_PROFILE_SUCCESS = `${STORE_KEY}/FETCH_PROFILE_SUCCESS`;\nexport const FETCH_PROFILE_FAILURE = `${STORE_KEY}/FETCH_PROFILE_FAILURE`;\n\nexport const fetchProfileRequest = createAction(FETCH_PROFILE_REQUEST);\nexport const fetchProfileSuccess = createAction(FETCH_PROFILE_SUCCESS);\nexport const fetchProfileFailure = createAction(FETCH_PROFILE_FAILURE);\n\nconst cardName = handleActions(\n    {\n        [fetchProfileRequest]: () => '',\n        [fetchProfileSuccess]: (_state, action) => action.payload.cardName,\n        [fetchProfileFailure]: (_state, action) => action.payload\n    },\n    ''\n);\n\nconst cardNumber = handleActions(\n    {\n        [fetchProfileRequest]: () => '',\n        [fetchProfileSuccess]: (_state, action) => action.payload.cardNumber,\n        [fetchProfileFailure]: (_state, action) => action.payload\n    },\n    ''\n);\n\nconst expDate = handleActions(\n    {\n        [fetchProfileRequest]: () => '',\n        [fetchProfileSuccess]: (_state, action) => action.payload.expDate,\n        [fetchProfileFailure]: (_state, action) => action.payload\n    },\n    ''\n);\n\nconst CVV = handleActions(\n    {\n        [fetchProfileRequest]: () => '',\n        [fetchProfileSuccess]: (_state, action) => action.payload.CVV,\n        [fetchProfileFailure]: (_state, action) => action.payload\n    },\n    ''\n);\n\nexport default combineReducers({\n    cardName,\n    cardNumber,\n    expDate,\n    CVV\n});","export const getCardName = (state) => state.profile.cardName;\nexport const getCardNumber = (state) => state.profile.cardNumber;\nexport const getExpDate = (state) => state.profile.expDate;\nexport const getCVV = (state) => state.profile.CVV;","const LOCAL_STORAGE_KEY = 'profile';\n\nexport const getProfileInLocalStorage = () => {\n    return JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY));\n};\n\nexport const setProfileInLocalStorage = (localStorageValue) => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(localStorageValue));\n};","import { takeLatest, call, put } from 'redux-saga/effects';\n\nimport { fetchProfileRequest, fetchProfileSuccess, fetchProfileFailure } from './duck';\nimport { setProfileInLocalStorage } from './api';\n\nfunction* fetchProfileWatcher() {\n    yield takeLatest(fetchProfileRequest, fetchProfileFlow);\n}\n\nfunction* fetchProfileFlow(action) {\n    try {\n        yield call(setProfileInLocalStorage(action.payload));\n        yield put(fetchProfileSuccess(action.payload));\n    }\n    catch (error) {\n        yield put(fetchProfileFailure(error));\n    }\n}\n\nexport default function*() {\n    yield fetchProfileWatcher();\n}","import { takeLatest, call, put, select } from \"redux-saga/effects\";\n\nimport {\n    fetchMapRequest,\n    fetchMapSuccess,\n    fetchMapFailure,\n    fetchAddressListRequest,\n    fetchAddressListSuccess,\n    fetchAddressListFailure\n} from \"./duck\";\nimport { mapInit, fetchAddressList } from \"./api.js\";\nimport { getCardName } from '../Profile';\nimport { getProfileInLocalStorage } from '../Profile/api';\n\nfunction* fetchMapWatcher() {\n    yield takeLatest(fetchMapRequest, fetchMapFlow);\n    yield takeLatest(fetchAddressListRequest, fetchAddressListFlow);\n}\n  \nfunction* fetchMapFlow(action) {\n    const mapContainer = action.payload;\n  \n    try {\n        const map = yield call(mapInit, mapContainer);\n        if (map) {\n            yield put(fetchMapSuccess());\n\n            const isProfileFilledIn = yield select(getCardName);\n            if (isProfileFilledIn || getProfileInLocalStorage()) yield put(fetchAddressListRequest());\n        }\n    }\n    catch (error) {\n        yield put(fetchMapFailure(error.message));\n    }\n}\n\nfunction* fetchAddressListFlow() {\n    try {\n        const addresses = yield call(fetchAddressList);\n        if (addresses) yield put(fetchAddressListSuccess(addresses));\n    }\n    catch (error) {\n        yield put(fetchAddressListFailure(error.message));\n    }\n}\n\n export default function*() {\n    yield fetchMapWatcher();\n }","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { apiKey } from '../../../modules/Map/apiKey';\nimport { fetchMapRequest } from '../../../modules/Map';\nimport './MapBox.css';\n\nclass MapBox extends Component {\n    mapContainer = React.createRef();\n\n    componentDidMount() {\n        const { fetchMapRequest } = this.props;\n        fetchMapRequest(this.mapContainer, apiKey);\n    }\n\n    render() {\n        return <div className=\"MapBox\" ref={this.mapContainer} />;\n    }\n}\n\nexport default connect(\n    () => {},\n    { fetchMapRequest }\n)(MapBox);","import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\n\nconst STORE_KEY = 'ROUTE';\nconst FETCH_ROUTE_REQUEST = `${STORE_KEY}/FETCH_ROUTE_REQUEST`;\nconst FETCH_ROUTE_SUCCESS = `${STORE_KEY}/FETCH_ROUTE_SUCCESS`;\nconst FETCH_ROUTE_FAILURE = `${STORE_KEY}/FETCH_ROUTE_FAILURE`;\nconst FETCH_NEW_ROUTE_REQUEST = `${STORE_KEY}/FETCH_NEW_ROUTE_REQUEST`;\n\nexport const fetchRouteRequest = createAction(FETCH_ROUTE_REQUEST);\nexport const fetchRouteSuccess = createAction(FETCH_ROUTE_SUCCESS);\nexport const fetchRouteFailure = createAction(FETCH_ROUTE_FAILURE);\nexport const fetchNewRouteRequest = createAction(FETCH_NEW_ROUTE_REQUEST);\n\nconst route = handleActions(\n    {\n        [fetchRouteRequest]: () => null,\n        [fetchRouteSuccess]: (_state, action) => action.payload,\n        [fetchRouteFailure]: (_state, action) => action.payload,\n        [fetchNewRouteRequest]: () => null\n    },\n    null\n);\n\nexport default combineReducers({\n    route\n});","export const getRoute = (state) => state.route.route;","import { takeLatest, call, put } from 'redux-saga/effects';\n\nimport { fetchRouteRequest, fetchRouteFailure, fetchRouteSuccess, fetchNewRouteRequest } from './duck';\nimport { fetchRoute, drawRoute, removeRoute, flyTo } from '../Map/api';\n\nfunction* fetchRouteWatcher() {\n    yield takeLatest(fetchRouteRequest, fetchRouteFlow);\n    yield takeLatest(fetchRouteSuccess, fetchRouteSuccessFlow);\n    yield takeLatest(fetchNewRouteRequest, fetchNewRouteFlow);\n}\n\nfunction* fetchRouteFlow(action) {\n    try {\n        const { address1, address2 } = action.payload;\n\n        const route = yield call(fetchRoute, address1, address2);\n        yield put(fetchRouteSuccess(route));\n        yield call(drawRoute, route);\n    }\n    catch (error) {\n        yield put(fetchRouteFailure(error.message));\n    }\n}\n\nfunction* fetchRouteSuccessFlow(action) {\n    try {\n        yield call(flyTo, action.payload[0]);\n    }\n    catch (error) {\n        throw error;\n    }\n}\n\nfunction* fetchNewRouteFlow() {\n    try {\n        yield call(removeRoute);\n    }\n    catch (error) {\n        throw error;\n    }\n}\n\nexport default function*() {\n    yield fetchRouteWatcher();\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Field, Form } from 'formik';\nimport MuiTextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { fieldToTextField } from 'formik-material-ui';\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { getAddressList, fetchAddressListRequest } from '../../../modules/Map';\nimport { getCardName } from '../../../modules/Profile';\nimport { getProfileInLocalStorage } from '../../../modules/Profile/api';\nimport { getRoute, fetchRouteRequest, fetchNewRouteRequest } from '../../../modules/Route';\n\nconst styles = (theme) => ({\n    MapForm: {\n        position: 'absolute',\n        top: 50,\n        left: 20\n    },\n    Card: {\n        boxSizing: 'border-box',\n        width: 480,\n        padding: 10\n    },\n    Link: {\n        textDecoration: 'none'\n    },\n    Card__Button: {\n        marginTop: 20\n    },\n    Button: {\n        maxWidth: 160\n    }\n});\n\nconst BasicFormSchema = Yup.object().shape({\n    address1: Yup.string()\n      .required(\"Необходимо выбрать адрес\"),\n    address2: Yup.string()\n      .required(\"Необходимо выбрать адрес\")\n});\n\nconst UppercasingTextField = (props) => (\n    <MuiTextField\n        {...fieldToTextField(props)}\n        onChange={(event) => {\n            const { value } = event.target;\n            props.form.setFieldValue(\n                props.field.name,\n                value ? value : ''\n            );\n        }}\n    />\n);\n\nclass MapForm extends Component {\n    renderMessage() {\n        const { classes } = this.props;\n\n        return (\n            <>\n                <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                    Заполните платежные данные\n                </Typography>\n\n                <Typography variant=\"body2\">\n                    Укажите информацию о банковской карте,<br/>чтобы сделать заказ.\n                </Typography>\n                            \n                <Link to='/profile' className={classes.Link}>\n                    <Button\n                        className={classes.Card__Button}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                    >\n                        Перейти в профиль\n                    </Button>\n                </Link>\n            </>\n        );\n    }\n\n    renderNewOrderForm() {\n        const { fetchNewRouteRequest, classes } = this.props;\n\n        return (\n            <>\n                <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                    Заказ размещен\n                </Typography>\n\n                <Typography variant=\"body2\">\n                    Такси уже едет к вам. Прибудет приблизительно<br/>через 10 минут.\n                </Typography>\n                            \n                <Button\n                    className={classes.Card__Button}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={fetchNewRouteRequest}\n                >\n                    Сделать новый заказ…\n                </Button>\n            </>\n        );\n    }\n\n    renderOrderForm() {\n        const { addressList, fetchRouteRequest, classes } = this.props;\n    \n        const ranges = (Array.isArray(addressList)) ? addressList : [];\n\n        return (\n            <>\n                <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                    Вызов такси\n                </Typography>\n\n                <Formik\n                    initialValues={{\n                        address1: \"\",\n                        address2: \"\"\n                    }}\n\n                    validationSchema={BasicFormSchema}\n                                \n                    onSubmit={({ address1, address2 }) => {\n                        fetchRouteRequest({ address1, address2 });\n                    }}\n\n                    render={({\n                            values,\n                            handleChange,\n                            isValid,\n                            submitForm\n                        }) => (\n                        <Form>\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"space-around\"\n                                align-items=\"start\"\n                                className={classes.FormGrid}\n                            >\n                                <Field\n                                    type=\"text\"\n                                    name=\"address1\"\n                                    label=\"Адрес отправления\"\n                                    value={values.address1}\n                                    select\n                                    margin=\"normal\"\n                                    component={UppercasingTextField}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    onChange={handleChange}\n                                >\n                                    {ranges.map(option => (\n                                        <MenuItem key={option} value={option}>\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </Field>\n\n                                <Field\n                                    type=\"text\"\n                                    name=\"address2\"\n                                    label=\"Адрес прибытия\"\n                                    value={values.address2}\n                                    select\n                                    margin=\"normal\"\n                                    component={UppercasingTextField}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                >\n                                    {ranges.map(option => {\n                                        if (option === values.address1) return null;\n                                        return (<MenuItem key={option} value={option}>\n                                            {option}\n                                        </MenuItem>);\n                                    })}\n                                </Field>\n                                \n                                <Button\n                                    className={`${classes.Button} ${classes.Card__Button}`}\n                                    type=\"submit\"\n                                    variant=\"outlined\"\n                                    color=\"primary\" \n                                    disabled={!isValid}\n                                    onClick={submitForm}\n                                >\n                                    Вызвать такси\n                                </Button>\n                            </Grid>\n                        </Form>          \n                    )}\n                />\n            </>\n        );\n    }\n\n    render() {\n        const { cardName, route, classes } = this.props;\n\n        return (\n            <div className={classes.MapForm}>\n                <Card className={classes.Card}>\n                    <CardContent>\n                        {(cardName || getProfileInLocalStorage())\n                            ? (route) ? this.renderNewOrderForm() : this.renderOrderForm()\n                            : this.renderMessage()\n                        }\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    cardName: getCardName(state),\n    addressList: getAddressList(state),\n    route: getRoute(state)\n});\n\nconst mapDispatchToProps = {\n    fetchAddressListRequest,\n    fetchRouteRequest,\n    fetchNewRouteRequest\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(MapForm));","import React, { memo } from 'react';\n\nimport MapBox from './MapBox';\nimport MapForm from './MapForm';\nimport './Map.css';\n\nconst Map = memo(() => (\n    <div className=\"Map\">\n        <MapBox />\n        <MapForm />\n    </div>\n));\n\nexport default Map;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Formik, Field, Form } from 'formik';\nimport formatStringByPattern from \"format-string-by-pattern\";\nimport MuiTextField from '@material-ui/core/TextField';\nimport { fieldToTextField } from 'formik-material-ui';\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker\n} from '@material-ui/pickers';\n\nimport {\n    getCardName,\n    getCardNumber,\n    getExpDate,\n    getCVV,\n    fetchProfileRequest\n} from '../../modules/Profile';\nimport { getProfileInLocalStorage } from '../../modules/Profile/api';\n\nconst styles = theme => ({\n    Grid: {\n        minHeight: '100vh',\n    },\n    Title: {\n      textAlign: 'center',\n    },\n    Card: {\n        boxSizing: 'border-box',\n        minWidth: '60%',\n        maxWidth: '60%',\n        padding: 10\n    },\n    Grid__Card: {\n        marginTop: 50\n    },\n    Form__Input_Date: {\n        marginTop: 0\n    },\n    Link: {\n        textDecoration: 'none'\n    },\n    Card__Button: {\n        marginTop: 20\n    }\n});\n\nconst BasicFormSchema = Yup.object().shape({\n    cardName: Yup.string()\n        .required(\"Необходимо заполнить поле\")\n        .matches(/^[A-Za-z]+\\s+[A-Za-z]+$/, \"Имя владельца должен быть полным и на латинице\"),\n    cardNumber: Yup.string()\n        .required(\"Необходимо заполнить поле\")\n        .matches(/^[0-9]+$/, \"Номер карты должен содержать только цифры\")\n        .length(16, \"Номер карты должен содержать 16 цифр\"),\n    CVV: Yup.string()\n        .required(\"Необходимо заполнить поле\")\n        .matches(/^[0-9]+$/, \"СVV должен содержать только цифры\")\n        .length(3, \"СVV должен содержать 3 цифры\")\n});\n\nconst UppercasingTextField = (props) => (\n    <MuiTextField\n        {...fieldToTextField(props)}\n        onChange={(event) => {\n            const { value } = event.target;\n            props.form.setFieldValue(\n                props.field.name,\n                value ? value : ''\n            );\n        }}\n    />\n);\n\nclass Profile extends Component {\n    state = {\n        date: new Date('2025-01-01'),\n        dateInputDisabled: false,\n        isCardAdded: false\n    };\n\n    handleDateChange = (date) => {\n        this.setState({\n            date\n        });\n    };\n\n    getFormattedDate = (date) => {\n        let day = date.getDate();\n        if (day < 10) day = `0${day}`;\n\n        let month = date.getMonth() + 1;\n        if (month < 10) month = `0${month}`;\n\n        let year = date.getFullYear();\n\n        return `${day}.${month}.${year}`;\n    }\n\n    renderAlert() {\n        const { classes } = this.props;\n\n        return (\n            <>\n                <Typography variant=\"body2\">\n                    Платежные данные обновлены. Теперь вы можете заказывать такси.\n                </Typography>\n                                \n                <Link to='/map' className={classes.Link}>\n                    <Button\n                        className={classes.Card__Button}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                    >\n                        Перейти на карту\n                    </Button>\n                </Link>\n            </>\n        );\n    }\n\n    renderForm() {\n        const { fetchProfileRequest, classes } = this.props;\n        const { cardName, cardNumber, expDate, CVV } = (getProfileInLocalStorage()) ? getProfileInLocalStorage() : this.props;\n        const { date, dateInputDisabled } = this.state;\n\n        return (\n            <>\n                <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                    Способ оплаты\n                </Typography>\n                \n                <Formik\n                    initialValues={{\n                        cardName: cardName,\n                        cardNumber: cardNumber,\n                        expDate: expDate,\n                        CVV: CVV\n                    }}\n\n                    validationSchema={BasicFormSchema}\n\n                    handleChange={(e) => {\n                        return formatStringByPattern(\"9999 9999 9999 9999\", e.target.value);\n                    }}\n                                \n                    onSubmit={({ cardName, cardNumber, CVV }) => {\n                        this.setState({\n                            dateInputDisabled: true,\n                            isCardAdded: true\n                        })\n\n                        const expDate = this.getFormattedDate(date);                                    \n                            fetchProfileRequest({ cardName, cardNumber, expDate, CVV });\n                        }\n                    }\n\n                    render={({\n                        submitForm,\n                        handleChange\n                    }) => (\n                            <Form\n                                className=\"Form\"\n                            >\n                                <Grid\n                                    container\n                                    spacing={3}\n                                >\n                                    <Grid item xs={12} sm={6}>\n                                        <Field\n                                            type=\"text\"\n                                            name=\"cardName\"\n                                            label=\"Имя владельца\"\n                                            fullWidth={true}\n                                            component={UppercasingTextField}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6}>\n                                        <Field\n                                            type=\"text\"\n                                            name=\"cardNumber\"\n                                            label=\"Номер карты\"\n                                            fullWidth={true}\n                                            component={UppercasingTextField}\n                                            onChange={handleChange}\n                                        />\n                                    </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                                <KeyboardDatePicker\n                                                    className={classes.Form__Input_Date}\n                                                    name=\"expDate\"\n                                                    label=\"Дата окончания действия\"\n                                                    id=\"date-picker-inline\"\n                                                    disableToolbar\n                                                    variant=\"inline\"\n                                                    format=\"MM.dd.yyyy\"\n                                                    margin=\"normal\"\n                                                    fullWidth={true}\n                                                    value={date}\n                                                    onChange={this.handleDateChange}\n                                                    disabled={dateInputDisabled}\n                                                />\n                                            </MuiPickersUtilsProvider>\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <Field\n                                                type=\"text\"\n                                                name=\"CVV\"\n                                                label=\"CVV\"\n                                                helperText=\"Три цифры на задней стороне карты\"\n                                                fullWidth={true}\n                                                component={UppercasingTextField}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <Button\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={submitForm}\n                                            >\n                                                Сохранить\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                            </Form>\n                        )\n                    }\n               />\n            </>\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { isCardAdded } = this.state; \n\n        return (\n            <div className=\"Profile\">\n                <Grid\n                    container\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    className={classes.Grid}\n                >\n                    <Card className={`${classes.Card} ${classes.Grid__Card}`}>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h4\" component=\"h2\" className={classes.Title}>\n                                Профиль\n                            </Typography>\n\n                            {(isCardAdded) ? this.renderAlert() : this.renderForm()}\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    cardName: getCardName(state),\n    cardNumber: getCardNumber(state),\n    expDate: getExpDate(state),\n    CVV: getCVV(state)\n});\n\nconst mapDispatchToProps = { fetchProfileRequest };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(Profile));","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Redirect, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../Header';\nimport Login from '../../Login';\nimport PrivateRoute from '../PrivateRoute';\nimport Map from '../../Map';\nimport Profile from '../../Profile';\nimport { getIsAuthorized, fetchAuthRequest } from '../../../modules/Auth';\nimport { getCardName, fetchProfileRequest } from '../../../modules/Profile';\n\nclass AppRouter extends Component {\n  componentDidMount() {\n    const { isAuthorized, fetchAuthRequest, cardName } = this.props;\n    const authDataSaved = window.localStorage.getItem('authData');\n    const profileSaved = window.localStorage.getItem('profile');\n\n    // Если в локальном хранилище есть данные — они записываются в стор\n    if (!isAuthorized && authDataSaved) fetchAuthRequest(JSON.parse(authDataSaved));\n    if (!cardName && profileSaved) fetchProfileRequest(JSON.parse(profileSaved));\n  }\n\n  render() {\n    const { isAuthorized } = this.props;\n    const authDataSaved = window.localStorage.getItem('authData');\n\n    // Фикс для избежания дёрганий\n    let indexPath, indexComponent;\n    if (isAuthorized || authDataSaved) {\n      indexPath = '/map';\n      indexComponent = Map;\n    }\n    else {\n      indexPath = '/login';\n      indexComponent = Login;\n    }\n\n    return (\n      <BrowserRouter>\n        <Header />\n        <Switch>\n          <Route path={indexPath} component={indexComponent} />\n          <PrivateRoute path='/map' component={Map} />\n          <PrivateRoute path='/profile' component={Profile} />\n          <Redirect to={indexPath} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isAuthorized: getIsAuthorized(state),\n  cardName: getCardName(state)\n})\n\nconst mapDispatchToProps = { fetchAuthRequest };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AppRouter);","import { combineReducers } from 'redux';\nimport { fork } from 'redux-saga/effects';\n\nimport auth, { sagas as authSagas } from './Auth';\nimport profile, { sagas as profileSagas } from './Profile';\nimport map, { sagas as mapSagas } from './Map';\nimport route, { sagas as routeSagas } from './Route';\n\nexport default combineReducers({\n    auth,\n    profile,\n    map,\n    route\n});\n\nexport function* rootSaga() {\n    yield fork(authSagas);\n    yield fork(profileSagas);\n    yield fork(mapSagas);\n    yield fork(routeSagas);\n}","import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer, { rootSaga } from './modules';\n\nconst createAppStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(\n        rootReducer,\n        compose(\n            applyMiddleware(sagaMiddleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        )\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\nexport default createAppStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport AppRouter from './components/common/AppRouter';\nimport createStore from './store';\nimport './index.css';\n\nconst store = createStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>,\n    document.querySelector('.root')\n);"],"sourceRoot":""}